PYJS DEVELOPER RULES
====================

Revision: 0.1

Date: 2012-05-07

--------

The developer rules are here to make development contributions
consistent and integration of changes by multiple committers
easier. There are other ways of doing things with different pros and
cons. If you want to assist please follow the rules. If after using
them for a while you (still) find things work against you, propose
changes on the mailing list.

Main website: http://pyjs.org

Mailing list: https://groups.google.com/forum/?fromgroups#!forum/pyjs-users

Source code: https://github.com/pyjs/pyjs

Bugs/Issues: https://github.com/pyjs/pyjs/issues?labels=Milestone-Release0.8&state=open

Wiki: https://github.com/pyjs/pyjs/wiki



General source rules
--------------------

* obey PEP8 where it's sensible to do so.  there's a program called
  pep8.py which automatically checks stuff. Follow this with the
  following exceptions:

  - we have to remain consistent with GWT function names
  - properties in pyjs are too expensive, we have to use the silly
    get{Property} and set{Property} function names. 

* prevent white-space cleanups, by not using tabs, end-of-line
  whitespace or end-of-file empty newlines. Some editors (e.g.) remove
  these and that leads to commit changes that are not significant, but
  distract from the real changes. Run::
 
    python -m reindent your_changed_python_file.py

  on your source files, at the latest before committing sources.

* Never use significatnt end-of-line whitespace in multi-line
  strings. reindent.py removes it even if you editor might not.

UI source development
+++++++++++++++++++++

* Follow GWT source code as closely as possible.  Make use of
  java2py.py (in contrib) to do 95% of the conversion work for
  you. Don't just follow the GWT API: do **literally** "blindly"
  follow the GWT source code, trusting it pretty much 100%.  *Don't*
  try to second-guess it; **don't** try to "rework it"; in fact,
  **don't think at all**: just "go with the flow".  The reason is
  simple: the GWT team have far more resources than we do, and if you
  want to re-learn all of the "browser tricks" that they've spent
  man-decades finding and working around *go ahead*.

  If GWT source doesn't exist: try to find some.  Ff you *really*
  can't find anything, then find something that's pretty close to what
  you want, subclass it if possible, and go from there.

* make **sure** that you are aware of the ``__browser__``,
  ``__{engine}__`` and the platform/* overrides systems **before** messing
  with UI code.

Copyright and credits
+++++++++++++++++++++

* Please add yourself to copyright and CREDITS.  If kindly committing
  someone else's patch, please add them rather than yourself, of
  course.

  This is **important**.  the copyright file is crucial for the
  acceptance of pyjs into debian: each and **every** single copyright
  holder **must** be recorded.  please note that the copyright file is
  in the format specified by debian DEP5 (which is pretty blindingly
  obvious, but just... please bear it in mind that the copyright file
  is in a machine-readable standards-compliant format)

Development using Github
------------------------

The source of pyjs is on github:
``https://github.com/pyjs/pyjs``. Create a github account and fork the
source if you want to try and make chances for yourself.

If you want to have your changes integrated in the main source make
sure you follow the branching recommendations below and commit a pull
request on github.

If you are going to contribute more often a laissez-faire attitude is
taken to get you added to the 'master' repository. In that case make
sure you follow the development rules below strictly.

General rules for the repository
++++++++++++++++++++++++++++++++

* Break stuff in the repository, it gets reverted.  The prime rule of
  pyjs is that the latest repository master code **must** work, for
  production environments to be able to use it.

* Please feel free to announce on the list "i'm going to do xyz, any
  objections or input" but otherwise just happily take the initiative.
  If however you are not an experienced developer then feel free to
  ask at each stage before proceeding.

* All development should be done on branches (preferably using the
  gitflow model). Major changes must be reviewed by someone else
  before merging into the master branch.

* Please **only add source code** and **only add pyjs-related** source code.

  On no account add the source code of an external project to pyjs:
  create a download script which fetches and unpacks a stable revision
  of that code.

  On **absolutely no account** add any binary-object files, executables,
  fonts, external images that were written by and for other projects,
  or anything **other** than pyjs source code.

  If however an image is required for example as part of CSS styling in the
  examples, and the image's copyright is your own, or the license on the
  image can be established to be a compatible Software (Libre) License, then
  it *may* be added to the repository.

  Also please remember that the javascript that is auto-generated by
  the pyjs compiler is also considered to be "object code", and as
  such should **never** be added to the pyjs repository.

  Anything that is needed must either be downloaded or it must be
  compiled (or both). There are at present three download.sh scripts
  (in the examples) which can be used for inspiration and guidance.

  If in doubt - ask on the developer list **before** committing
  because it is a royal pain to permanently destroy-delete files in
  git.

* Commits must be "single purpose".  if you're thinking of using the
  word "and" in the commit message, **stop** and think. If you break
  something, the **whole** commit will be reverted and **you** will
  have to spent effort "dividing" the patch, which should have been
  done in the first place.

* *Don't* do major whitespace reorganisations at the same time as
  coding patches. To keep them separate,
  and commit whitespace patches with a commit message mentioning "whitespace".

* Commit messages must describe the patch not the action being taken!
  "added this"; "removed this" are NOT ok.

* Commit messages should really include the bugreport number of the issue
  being fixed.  if there isn't a bugreport number, you should consider
  raising one.  it's just good practice.

* Please try to keep discussion of bugs to the bugtracker, but also
  make sure that the pyjs-dev list is alerted when a bug is raised.
  it might not always work out that way, and if it doesn't, that's
  fine: it's just nice to be able to know what the hell's going on
  with a particular bug, without having to hunt through the rather
  obtuse pyjs-dev google group.

* Before pyjs UI committing: check as *many* engines and browsers as
  you can using as many examples as you can stand, using both
  ``--strict`` *and* ``-O`` for browsers.  If you don't have certain
  engines or browsers, **tell people** and ask them to test on your
  behalf.  Preferably before committing.

* non-UI-related stuff (compiler-related) make **sure** you run
  ``libtest`` with ``--strict`` and with standard http://python.org;
  and do consider running under ``pyv8run.sh`` as well
  (``./pyv8test.sh --strict``). As there's a 64-bit version of libv8,
  now, that's not as hard as it used to be: pyv8 now compiles native
  on 64-bit.

* compiler-related additions and changes *must* be accompanied by
  a unit test (hence the reason why libtest must be run, under so many
  different environments).

* If you want to have some private Makefile targets at the top level
  for your development purposes, consider using a file ``GNUmakefile``
  for that it is ignored for commits.

Using gitflow
-------------

We encourage you to use gitflow as it clearly marks different types of
changes and has tooling to support a common workflow.

Gitflow is a workflow built upon git that helps a group of developers
work with the same branching and merging model. It helps with naming
of the brances and fast-forwarding. It is supported by git extensions
that make it as easy to use as git itself, but make git more easy to
use than without using gitflow. If you have not used git before,
please take the time to install, learn and use it.

The original documenation on gitflow can be found at
http://nvie.com/posts/a-successful-git-branching-model/, this is
documentation of the process *without* the gitflow extension, so it
often shows multiple commands especially for merging and deleting
temporary branches.

Installation instruction for gitflow can be found on github:
https://github.com/nvie/gitflow/wiki/Installation for OS X, Linux and
Windows.

Checking out and preparing your repository
++++++++++++++++++++++++++++++++++++++++++

Checkout the repository from github::

  git clone git@github.com:<your github name or pyjs>/pyjs.git
  cd pyjs
  python setupgit.py

If this is on your fresh fork of pyjs on github, you should push the
development branch using ``git push origin develop``

Working on a feature or bug
++++++++++++++++++++++++++++

To start working on a feature use the command::

  git flow feature start short_name_for_your_feature

This will create a new branch, and change to that branch. You can now
edit to your hearths content and use git to add/rename/remove files.
At any time you can do a ``git commit -a`` to save all your changes.
Once you are done with the feature, run ``python -m reindent *.py`` on
any changed python sources and do a final commit using::

  git flow feature finish short_name_for_your_feature

This merges the feature back into the development branch and deletes
the branch short_name_for_your_feature.

Using plain git
----------------

If you don't want to use gitflow, at least use git branches which are
easy and cheap. The branch names should have the following information::

     username    = github user 
     bug|feat    = whichever appropriate
     module      = the affected module, if any, or bootstrap/builtin/etc.
     issueid     = the issue corresponding to this branch, if any
     description = a small description of the branch's activities/purpose

this will assist anyone testing/observing.

.. AvdN, not sure if the username is necessary, that should be traceable
.. on github


example (developer)::

    # git clone git://pyjamas.git.sourceforge.net/gitroot/pyjamas/pyjamas
    # git config remote.origin.pushurl ssh://<username>@pyjamas.git.sourceforge.net/gitroot/pyjamas/pyjamas
    # git config remote.origin.push "refs/heads/<username>/*:refs/heads/<username>/*"
    # git checkout -b <userXZY>/bug/101-default-stylesheet
    # ...working/commiting/building...
    # git push
       (branch get reviewed/tested/accepted)
    # git checkout master
    # git pull
    # git rebase -i <userXZY>/bug/101-default-stylesheet
       (remove any merge commits)
    # git push origin master

the remote.origin.push config option will enable pushing all your
branches by default.  when you want to push to master (public), you must
specify explicitly.

example (user)::

    # git clone git://pyjamas.git.sourceforge.net/gitroot/pyjamas/pyjamas
    # git checkout -b testing <userXYZ>/bug/101-default-stylesheet
    # git merge master
    # python bootstrap.py
        (build apps/examples/etc.)

the checkout command will create a new branch, "testing", based off
the remote branch "<userXZY>/bug/101-default-stylesheet".  you can
switch between branches (testing different builds) without re-running
bootstrap.py.  for each new branch, merge "master".
